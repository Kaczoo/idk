 |                 |
 |    8-BIT CPU    |
 |                 |


=== general info ===

The worst possible working 8-bit cpu
I hope it will be working


=== instruction set ===

[UUU III X R  VVVV VVVV]
III - instruction id
X - depends on instruction; usually indicates how VVVV VVVV is going to be used
R - register id
U - unused, void bits
VVVV VVVV - a constant or memory address

MWI -> 000 ( X R )
MWO -> 001 ( U R )
JMP -> 010 ( U U )
JEZ -> 011 ( U R )
ADD -> 100 ( X R )
SUB -> 101 ( X R )
AND -> 110 ( X R )
IOR -> 111 ( X R )


MWI
  if X = 0 loads constant VVVV VVVV into R
  if X = 1 loads a word from memory address VVVV VVVV into R

MWO
  loads word stored in R into memory with address VVVV VVVV

JMP
  unconditionally updates a value stored in PC to VVVV VVVV

JEZ
  if R = 0 and ZR0 = 1 updates a value stored in PC to VVVV VVVV
  if R = 1 and ZR1 = 1 updates a value stored in PC to VVVV VVVV

ADD
  if X = 0 adds a constant VVVV VVVV to R
  if X = 1 loads a word stored in !R to R 

SUB
  if X = 0 subtracts a constant VVVV VVVV from R
  if X = 1 subtracts a word stored in !R from R

AND
  if X = 0 performs a bitwise AND operation on R with constant VVVV VVVV
  if X = 1 performs a bitwise AND operation on R with !R

IOR
  if X = 0 performs a bitwise OR operation on R with constant VVVV VVVV
  if X = 1 performs a bitwise OR operation on R with !R


=== registers ===

= general purpose registers =
R0: general purpose register 0 -> 0
R1: general purpose register 1 -> 1

= special usage registers =
PC: program counter


=== flags ===

ZR0: value stored in R0 is equal to 0
ZR1: value stored in R1 is equal to 0

checked by peforming a bitwise NOR operation


=== memory layout ===

[0x00 - 0xFF]

0x00 - 0x7F -> ROM
  allows for storing 64 16-bit instructions 
0x80 - 0xFF -> RAM
  allows for storing 128 8-bit words


=== instructions -> alu controls ===

[S1 S2 S3]
MSB to LSB

MWI -> 0 1 1

MWO -> 0 1 1

JMP -> 0 1 1

JEZ -> 0 1 1

ADD -> 0 0 0

SUB -> 1 0 0

AND -> 0 0 1

IOR -> 0 1 0


=== instructions -> alu output ===

[I1 I2 I3] [R]
MSB to LSB

i_R0 = !R && (I1 || !(I2 || I3))

i_R1 = R && (I1 || !(I2 || I3))

i_PC = !I1 && I2

i_RAM = !I1 && !I2 && I3


=== instructions -> alu input ===

[I1 I2 I3] [X] [R]
MSB to LSB
U - unused bit (doesnt matter)

2 multiplexers [A1 A2] [B1 B2]
MSB to LSB
00 -> R0
01 -> R1
10 -> V
11 -> RAM

A1 = (!I1 && !I2 && !I3) || (!I1 && I2)

A2 = (I1 && !X && R) || (I1 && !I2 && I3 && R) || (!I1 && !I2 && I3 && R) || (!I1 && !I2 && !I3 && X)

B1 = !X

B2 = X && (I2 || !R || !I3)

